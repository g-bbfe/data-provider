{"version":3,"sources":["../src/MissionDispatcher.js"],"names":["serialNumber","makeMissionKey","mission","missionKey","config","comboRequestEnabled","signature","MissionDispatcher","WorkerFactory","count","_context","workers","missionQueue","missionDefers","isRunning","emitter","i","worker","id","push","on","run","bind","missionDefer","missionInQueue","defer","has","set","emit","promise","console","log","threadsCount","context","warn","length","Math","min","dispatch","shift","finishHandler","delete","do","then","data","resolve","reason","reject"],"mappings":"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","file":"MissionDispatcher.js","sourcesContent":["import Deferred from './utils/Deferred';\nimport { createComboDefer } from './utils/ComboPromise';\nimport { EventEmitter } from 'events';\n\n// 会不会溢出？\nlet serialNumber = 0;\n\nfunction makeMissionKey(mission) {\n    let missionKey = mission.config.comboRequestEnabled ? mission.signature : serialNumber++;\n    return missionKey;\n}\n\n/*\n * @param {WorkerFactory|Function} 生成worker的工厂\n * @param {count|countber} 生成worker的数量 \n */\nclass MissionDispatcher {\n\n    // 【!!!约定】 以下划线开头的是私有变量，请不要调用 \n    _context = {\n        workers: [], // worker队列\n        missionQueue: [], // 任务队列 \n        // 持有相同defer的mission, 结构类似{missionDefer: mission} \n        missionDefers: new Map(),\n        isRunning: false, // controller的运行状态 \n        emitter: new EventEmitter()\n    };\n\n    constructor(WorkerFactory, count) { \n        for (let i = 0; i < count; i++) {\n            let worker = new WorkerFactory();\n            worker.id = i;\n            this._context.workers.push(worker);\n        }\n\n        this._context.emitter.on('mission:put', run.bind(this._context));\n        this._context.emitter.on('worker:add', run.bind(this._context));\n\n    }\n\n    put(mission) {\n\n        let missionKey = makeMissionKey(mission),\n            missionDefer = createComboDefer(missionKey),\n            missionInQueue = Object.assign({}, mission, { defer: missionDefer });\n\n        if (this._context.missionDefers.has(missionDefer) === false) {\n            this._context.missionDefers.set(missionDefer, missionInQueue);\n            this._context.missionQueue.push(missionInQueue);\n            this._context.emitter.emit('mission:put', run);\n        }\n\n        return missionDefer.promise;\n\n    };\n\n    start() {\n        if (this._context.isRunning === false) {\n            this._context.isRunning = true;\n            run.bind(this._context)();\n        } else {\n            console.log(' MissionDispatcher is already Running ... ');\n        }\n    };\n\n    stop() {\n        this._context.isRunning = false;\n    }\n\n}\n\nfunction run() {\n\n    let threadsCount,\n        context = this;\n\n    if (context.isRunning === false) {\n        console.warn(' MissionDispatcher is stopped ... ');\n        return;\n    }\n\n    if (context.missionQueue.length === 0) {\n        console.log(' No Mission ...  ');\n        return;\n    }\n\n    if (context.workers.length === 0) {\n        console.log(' No Avaliable workers ...  ');\n        return;\n    }\n\n    // realDo Mission ====\n    threadsCount = Math.min(context.workers.length, context.missionQueue.length);\n\n    while (threadsCount > 0) {\n        // 从map里出第一个\n        dispatch(context.workers.shift(), context.missionQueue.shift()); // FIFO\n        threadsCount--;\n    }\n\n    // 给worker分配任务, 合并请求\n    function dispatch(worker, mission) {\n\n        //console.log(\"%cSTART: workerId: %s, missionSignature: %s\", \"color:green\", worker.id, mission.signature);\n\n        var finishHandler = function() {\n            // 归还worker\n            context.workers.push(worker);\n            context.emitter.emit(\"worker:add\");\n            // 删除 执行过的 missionDefer\n            context.missionDefers.delete(mission.defer);\n        }\n\n        worker.do(mission)\n            .then(function(data) {\n                mission.defer.resolve(data);\n                // console.log(\"%cResolve: m %s, w %s \", \"color:blue\", mission, worker.id);\n                finishHandler();\n            }, function(reason) {\n                mission.defer.reject(reason);\n                // console.log(\"%cReject: m %s, w %s \", \"color:red\", mission, worker.id);\n                finishHandler();\n            });\n\n    }\n\n}\n\nexport default MissionDispatcher;\n"]}