{"version":3,"sources":["../../src/storage/Storage.js"],"names":["_ins","prefix","NAMESPACE","Storage","id","isMemory","ns","_methods","memory","methods","localStorage","test","userData","init","get","set","remove","clear","data","window","JSON","parse","key","value","encode","e","decode"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAGA;;;;;AAKA,IAAIA,OAAO,EAAX;AACA,IAAIC,SAAS,gBAAMC,SAAnB;;IAEMC,O;AAEF,qBAAYC,EAAZ,EAAkC;AAAA,YAAlBC,QAAkB,uEAAP,KAAO;AAAA;;AAC9B;AACA,YAAI,EAAEL,KAAKI,EAAL,aAAoBD,OAAtB,CAAJ,EAAoC;AAChCH,iBAAKI,EAAL,IAAW,IAAX;AACH,SAFD,MAEO;AACH,mBAAOJ,KAAKI,EAAL,CAAP;AACH;;AAED,aAAKA,EAAL,GAAUA,EAAV;AACA,aAAKE,EAAL,GAAUL,SAAS,GAAT,GAAeG,EAAf,GAAoB,GAA9B;;AAEA,aAAKG,QAAL,GAAgBF,WAAW,mBAASG,MAAT,CAAgBC,OAA3B,GAAsC,YAAW;AAC7D,gBAAI,mBAASC,YAAT,CAAsBC,IAAtB,EAAJ,EAAkC;AAC9B,uBAAO,mBAASD,YAAT,CAAsBD,OAA7B;AACH;AACD,gBAAI,mBAASG,QAAT,CAAkBD,IAAlB,EAAJ,EAA8B;AAC1B,uBAAO,mBAASC,QAAT,CAAkBH,OAAzB;AACH;AACD,mBAAO;AACHI,sBAAM,gBAAW,CAAE,CADhB;AAEHC,qBAAK,eAAW,CAAE,CAFf;AAGHC,qBAAK,eAAW,CAAE,CAHf;AAIHC,wBAAQ,kBAAW,CAAE,CAJlB;AAKHC,uBAAO,iBAAW,CAAE;AALjB,aAAP;AAOH,SAdoD,EAArD;;AAgBA,YAAI,KAAKV,QAAT,EAAmB;AACf,iBAAKA,QAAL,CAAcM,IAAd,CAAmB,KAAKP,EAAxB;AACH;AAEJ;;;;+BAEMY,I,EAAM;AACT,mBAAOC,OAAOC,IAAP,GAAc,yBAAeF,IAAf,CAAd,GAAqCA,IAA5C;AACH;;;+BAEMA,I,EAAM;AACT,mBAAOC,OAAOC,IAAP,GAAcA,KAAKC,KAAL,CAAWH,IAAX,CAAd,GAAiCA,IAAxC;AACH;;;4BAEGI,G,EAAKC,K,EAAO;AACZ,gBAAI;AACA,qBAAKhB,QAAL,CAAcQ,GAAd,CAAkB,KAAKT,EAAvB,EAA2BgB,GAA3B,EAAgC,KAAKE,MAAL,CAAYD,KAAZ,CAAhC;AACA,uBAAO,IAAP;AACH,aAHD,CAGE,OAAOE,CAAP,EAAU;AACR,uBAAO,KAAP;AACH;AACJ;;;4BAEGH,G,EAAK;AACL,gBAAI;AACA,uBAAO,KAAKI,MAAL,CAAY,KAAKnB,QAAL,CAAcO,GAAd,CAAkB,KAAKR,EAAvB,EAA2BgB,GAA3B,CAAZ,CAAP;AACH,aAFD,CAEE,OAAOG,CAAP,EAAU,CAAE;AACjB;;;+BAEMH,G,EAAK;AACR,gBAAI;AACA,qBAAKf,QAAL,CAAcS,MAAd,CAAqB,KAAKV,EAA1B,EAA8BgB,GAA9B;AACH,aAFD,CAEE,OAAOG,CAAP,EAAU,CAAE;AACjB;;;gCAEO;AACJ,gBAAI;AACA,qBAAKlB,QAAL,CAAcU,KAAd,CAAoB,KAAKX,EAAzB;AACH,aAFD,CAEE,OAAOmB,CAAP,EAAU,CAEX;AACJ;;;;;kBAIUtB,O","file":"Storage.js","sourcesContent":["import Solution from './Solution';\nimport Const from '../const';\n\n\n/**\n * [Storage description]\n * @param {[string]}  id       [惟一标识]\n * @param {Boolean} isMemory [是否使用内存级存储，默认为flase 即持久存储]\n */\nvar _ins = {};\nvar prefix = Const.NAMESPACE;\n\nclass Storage {\n\n    constructor(id, isMemory = false) {\n        // Singleton pattern\n        if (!(_ins[id] instanceof Storage)) {\n            _ins[id] = this;\n        } else {\n            return _ins[id];\n        }\n\n        this.id = id;\n        this.ns = prefix + \"_\" + id + \"_\";\n\n        this._methods = isMemory ? Solution.memory.methods : (function() {\n            if (Solution.localStorage.test()) {\n                return Solution.localStorage.methods;\n            }\n            if (Solution.userData.test()) {\n                return Solution.userData.methods;\n            }\n            return {\n                init: function() {},\n                get: function() {},\n                set: function() {},\n                remove: function() {},\n                clear: function() {}\n            };\n        })();\n\n        if (this._methods) {\n            this._methods.init(this.ns);\n        }\n\n    }\n\n    encode(data) {\n        return window.JSON ? JSON.stringify(data) : data;\n    }\n\n    decode(data) {\n        return window.JSON ? JSON.parse(data) : data;\n    }\n\n    set(key, value) {\n        try {\n            this._methods.set(this.ns, key, this.encode(value));\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        try {\n            return this.decode(this._methods.get(this.ns, key));\n        } catch (e) {}\n    }\n\n    remove(key) {\n        try {\n            this._methods.remove(this.ns, key);\n        } catch (e) {}\n    }\n\n    clear() {\n        try {\n            this._methods.clear(this.ns);\n        } catch (e) {\n\n        }\n    }\n\n}\n\nexport default Storage;\n"]}