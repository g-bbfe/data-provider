{"version":3,"sources":["../../src/utils/ComboPromise.js"],"names":["_runnings","comboDefersMap","comboPromisesMap","isFunction","value","Object","prototype","toString","call","createComboPromise","key","resolver","promise","get","set","then","createComboDefer","id","deferKey","comboDefer"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;;;AAEA,IAAIA,YAAY,EAAhB;;AAEA,IAAIC,iBAAiB,sBAArB;;AAEA,IAAIC,mBAAmB,sBAAvB;;AAEA,IAAMC,aAAa,SAAbA,UAAa,CAACC,KAAD,EAAW;AAC1B,WAAOC,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,KAA/B,MAA0C,mBAAjD;AACH,CAFD;;AAIA;AACA,SAASK,kBAAT,CAA4BC,GAA5B,EAAiCC,QAAjC,EAA2C;;AAEvC,QAAIC,UAAUV,iBAAiBW,GAAjB,CAAqBH,GAArB,CAAd;;AAEA,QAAI,EAAEE,uCAAF,CAAJ,EAAmC;AAC/BA,kBAAU,yBAAYD,QAAZ,CAAV;AACAT,yBAAiBY,GAAjB,CAAqBJ,GAArB,EAA0BE,OAA1B;;AAEAA,gBAAQG,IAAR,CAAa,gBAAQ;AACjBb,uCAAwBQ,GAAxB;AACH,SAFD,EAEG,iBAAS;AACRR,uCAAwBQ,GAAxB;AACH,SAJD;AAKH;;AAED,WAAOE,OAAP;AACH;;AAGD,SAASI,gBAAT,CAA0BC,EAA1B,EAA8B;;AAE1B,QAAIC,WAAWD,EAAf;AAAA,QACIE,aAAalB,eAAeY,GAAf,CAAmBK,QAAnB,CADjB;;AAGA,QAAI,OAAOC,UAAP,KAAsB,WAA1B,EAAuC;AACnCA,qBAAa,2BAAb;AACAlB,uBAAea,GAAf,CAAmBI,QAAnB,EAA6BC,UAA7B;AACH;;AAED;AACAA,eAAWP,OAAX,CAAmBG,IAAnB,CAAwB,gBAAQ;AAC5Bd,iCAAsBiB,QAAtB;AACH,KAFD,EAEG,iBAAS;AACRjB,iCAAsBiB,QAAtB;AACH,KAJD;;AAMA,WAAOC,UAAP;AACH;;QAGQV,kB,GAAAA,kB;QAAoBO,gB,GAAAA,gB;qBAEdP,kB","file":"ComboPromise.js","sourcesContent":["import Deferred from './Deferred';\n\nlet _runnings = {};\n\nlet comboDefersMap = new Map();\n\nlet comboPromisesMap = new Map();\n\nconst isFunction = (value) => {\n    return Object.prototype.toString.call(value) === '[object Function]';\n}\n\n// 相同id的resolver, 将已有的promise返回， 不再创建新的promise\nfunction createComboPromise(key, resolver) {\n\n    let promise = comboPromisesMap.get(key);\n\n    if (!(promise instanceof Promise)) {\n        promise = new Promise(resolver);\n        comboPromisesMap.set(key, promise);\n\n        promise.then(data => {\n            comboPromisesMap.delete(key);\n        }, error => {\n            comboPromisesMap.delete(key);\n        })\n    }\n\n    return promise;\n}\n\n\nfunction createComboDefer(id) {\n\n    let deferKey = id,\n        comboDefer = comboDefersMap.get(deferKey);\n\n    if (typeof comboDefer === 'undefined') {\n        comboDefer = new Deferred();\n        comboDefersMap.set(deferKey, comboDefer);\n    }\n\n    // 无论成功及失败， 都要删除对应的comboDefer, 然后再将成功或失败返回 \n    comboDefer.promise.then(data => {\n        comboDefersMap.delete(deferKey);\n    }, error => {\n        comboDefersMap.delete(deferKey);\n    })\n\n    return comboDefer;\n}\n\n\nexport { createComboPromise, createComboDefer };\n\nexport default createComboPromise;\n"]}